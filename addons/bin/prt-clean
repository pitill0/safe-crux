#!/bin/bash
#
# Copyright (c) 2007
#   by Victor Martinez, <pitillo@ono.com>
#   and Jose V Beneyto, <sepen@crux.nu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#  
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

msgError() {
  echo "Error, $@" 2>&1
  exit 1
}

msgVersion() {
  echo "$APPNAME $VERSION by Victor Martinez and Jose V Beneyto"
  exit 0
}

msgUsage() {
  echo "Make snapshots of installed ports and removes differences to keep a"\
  "clean system."
  echo "Usage: $APPNAME subcommand <options>"
  echo "  clean         Remove all stored snapshots"
  echo "  store    msg  Store a snapshot of installed ports"
  echo "  restore  num  Restore to stored snapshot number"
  echo "  diff     num  Show differences with the current state"
  echo "  list          List all stored snapshots"
  echo "  help          Show this help information"
  echo "  version       Show version information"
  exit 0
}

checkUID() {
  [ $(id -u) -ne 0 ] && msgError "you must be root to use $APPNAME"
}

makeSnapshot() {
  local num="$1"
  shift 1
  local msg="$@"
  echo "$msg" > $VARDIR/$num.msg
  prt-get listinst > $VARDIR/$num.snap
}

diffSnapshot() {
  local snap1="$VARDIR/$1.snap"
  local msg="current"
  local num="$(getSnapshot)"
  makeSnapshot $num "$msg"
  local snap2="$VARDIR/$num.snap"
  [ ! -f $snap1 ] && msgError "cat't read snapshot file '$snap1'"
  [ ! -f $snap2 ] && msgError "can't read snapshot file '$snap2'"
  cat $snap1 $snap2 | sort | uniq -u
  rm -f $snap2
}

getSnapshot() {
  local snaps="$(find $VARDIR -type f -name '*.snap')"
  local snaps="$(for i in ${snaps[@]}; do basename $i .snap; done)"
  local max=100
  local num=1
  for snap in ${snaps[@]}; do
    [ "$snap" == "$num" ] && let num=$num+1
  done
  echo $num
}

cleanSnapshot() {
  rm -f $VARDIR/*
}

storeSnapshot() {
  local msg="$1"
  local num="$(getSnapshot)"
  makeSnapshot $num "$msg"
}

restoreSnapshot () {
  local snap="$1"
  local diff="$(diffSnapshot $snap)"
  if [ ! -z "$diff" ]; then
    prt-get remove $diff
    local snaps="$(find $VARDIR -type f -name '*.snap')"
    for i in ${snaps[@]}; do
      s="$(basename $i .snap)"
      [ $s -gt $snap ] && rm -vf $VARDIR/$s.*
    done
  fi
}

listSnapshot() {
  local snaps="$(find $VARDIR -type f -name '*.snap')"
  for i in ${snaps[@]}; do
    s="$(basename $i .snap)"
    echo -ne "$s $(cat $VARDIR/$s.msg | tr '\n' ' ')\n"
  done
}

main () {
  case $1 in
    clean)
      cleanSnapshot
      ;;
    store)
      [ $# -ne 2 ] && msgUsage
      checkUID
      shift 1
      storeSnapshot "$@"
      ;;
    restore)
      [ $# -ne 2 ] && msgUsage
      checkUID
      restoreSnapshot $2
      ;;
    diff)
      [ $# -ne 2 ] && msgUsage
      diffSnapshot $2
      ;;
    list)
      listSnapshot
      ;;
    version)
      msgVersion
      ;;
    *)
      msgUsage
      ;;
  esac
}

VERSION=0.2
APPNAME=$(basename $0)

VARDIR="/opt/var/$APPNAME"

[ ! -d $VARDIR ] && install -d $VARDIR

[ $# -lt 1 ] && msgUsage

main "$@"

# End of file
